---
description: 
globs: 
alwaysApply: false
---
# Rust Code Quality Checks

## Pre-Commit Requirements

Before committing any changes to this Rust project, ensure the following quality checks pass:

### 1. Format Check
Run format check to ensure code follows Rust formatting standards:
```bash
cargo fmt --check
```

If formatting issues are found, fix them with:
```bash
cargo fmt
```

### 2. Clippy Linting
Run Clippy to catch common mistakes and improve code quality:
```bash
cargo clippy -- -D warnings
```

This treats all warnings as errors. Fix any issues before committing.

### 3. Build Check
Ensure the project compiles without errors:
```bash
cargo check
```

### 4. Tests (if applicable)
Run tests to ensure functionality is not broken:
```bash
cargo test
```

## Project Structure

- Main source code: [src/main.rs](mdc:src/main.rs)
- Project configuration: [Cargo.toml](mdc:Cargo.toml)
- Dependencies lock file: [Cargo.lock](mdc:Cargo.lock)

## Automated Pre-Commit Hook (Recommended)

Consider setting up a git pre-commit hook to automatically run these checks:

```bash
#!/bin/sh
# .git/hooks/pre-commit

echo "Running pre-commit checks..."

# Format check
echo "Checking formatting..."
cargo fmt --check
if [ $? -ne 0 ]; then
    echo "❌ Code formatting issues found. Run 'cargo fmt' to fix."
    exit 1
fi

# Clippy check
echo "Running clippy..."
cargo clippy -- -D warnings
if [ $? -ne 0 ]; then
    echo "❌ Clippy found issues. Please fix them before committing."
    exit 1
fi

# Build check
echo "Checking build..."
cargo check
if [ $? -ne 0 ]; then
    echo "❌ Build failed. Please fix compilation errors."
    exit 1
fi

echo "✅ All pre-commit checks passed!"
```

## Quick Command

Run all checks in sequence:
```bash
cargo fmt --check && cargo clippy -- -D warnings && cargo check
```

## IDE Integration

Ensure your editor is configured to:
- Format on save using `rustfmt`
- Show clippy warnings inline
- Run checks automatically

