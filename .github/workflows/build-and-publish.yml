name: Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: zipget-linux-x64.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: zipget-linux-x64-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            name: zipget-macos-x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            name: zipget-macos-arm64.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: zipget-windows-x64.zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.target, 'musl')

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Build Archive (Unix)
        shell: bash
        run: |
          binary_name="zipget"          
          dirname="zipget-${{ matrix.target }}"
          mkdir "$dirname"
          mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          tar -czf "${{ matrix.name }}" "$dirname"
        if: matrix.os != 'windows-latest'

      - name: Build Archive (Windows)
        shell: pwsh
        run: |
          $binary_name = "zipget.exe"
          $dirname = "zipget-${{ matrix.target }}"
          New-Item -ItemType Directory -Path $dirname
          Move-Item "target/${{ matrix.target }}/release/$binary_name" "$dirname/"
          Compress-Archive -Path $dirname -DestinationPath "${{ matrix.name }}"
        if: matrix.os == 'windows-latest'

      - name: Upload Archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} 